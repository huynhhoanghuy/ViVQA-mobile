plugins {
    id 'com.android.application'
}


android {
    configurations {
        extractForNativeBuild
    }

    compileSdk 33
    ndkVersion '21.4.7075529'

    defaultConfig {
        applicationId "org.pytorch.helloworld"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "arm64-v8a"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path './CMakeLists.txt'
            version '3.22.1'

        }
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    buildFeatures {
        viewBinding true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
            assets.srcDirs = ['src/main/assets']

        }
    }

}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'org.jetbrains.bio:npy:0.3.5'
    implementation "org.pytorch:pytorch_android_lite:1.12.2"
    extractForNativeBuild 'org.pytorch:pytorch_android_lite:1.12.2'
    def camerax_version = "1.2.3"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"

}
task extractAARForNativeBuild {
    doLast {
        configurations.extractForNativeBuild.files.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "$buildDir/$file.name"
                include "headers/**"
                include "jni/**"
            }
        }
    }
}
tasks.whenTaskAdded { task ->
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn(extractAARForNativeBuild)
    }
}

//task copyFiles(type: Copy) {
//    from 'src/main/assets'
//    into "$buildDir/intermediates/merged_assets/debug/out/data/data/org.pytorch.helloworld/files"
//}
//
//preBuild.dependsOn(copyFiles)